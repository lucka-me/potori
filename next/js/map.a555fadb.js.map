{"version":3,"sources":["webpack:///./src/views/NominationMap.vue?239f","webpack:///./src/views/NominationMap.vue","webpack:///./src/views/NominationMap.vue?e8d1","webpack:///./src/views/NominationMap.vue?1b1b"],"names":["class","id","title","navi-back","this","commonSense","$t","$route","query","status","code","parseInt","umi","get","reason","scanner","then","mapboxgl","ctrl","Map","container","accessToken","style","addControl","NavigationControl","FullscreenControl","once","resize","pourData","nominations","loadNominations","boundsNE","lng","lat","boundsSW","geoJSON","type","features","map","nomination","lngLat","properties","color","statusData","geometry","coordinates","getComputedStyle","document","documentElement","getPropertyValue","addSource","data","cluster","addLayer","source","filter","paint","layout","on","event","feature","clusterId","cluster_id","getSource","getClusterExpansionZoom","err","zoom","easeTo","center","fitBounds","linear","padding","raws","dia","getAll","predicator","raw","from","components","MaterialTopAppBar","MaterialTopAppBarAdjust","i18n","messages","render"],"mappings":"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","file":"js/map.a555fadb.js","sourcesContent":["export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./NominationMap.vue?vue&type=style&index=0&id=0281dbb5&lang=scss\"","<template>\n<material-top-app-bar :title=\"title\" navi-back/>\n<material-top-app-bar-adjust/>\n<main class=\"ignore-safe-area nomination-map\">\n    <div id=\"map-container\"/>\n</main>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Options, Watch } from 'vue-property-decorator';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nimport { dia } from '@/service/dia';\nimport { umi } from '@/service/umi';\nimport Nomination from '@/service/nomination';\n\nimport MaterialTopAppBar from '@/components/material/TopAppBar.vue';\nimport MaterialTopAppBarAdjust from '@/components/material/TopAppBarAdjust.vue';\n\nimport locales from './NominationMap.locales.json';\n\n@Options({\n    components: {\n        MaterialTopAppBar, MaterialTopAppBarAdjust,\n    },\n    i18n: {\n        messages: locales\n    }\n})\nexport default class NominationMap extends Vue {\n\n    private ctrl?: mapboxgl.Map;\n\n    get title(): string {\n        return this.commonSense?.title ?? this.$t('all');\n    }\n\n    private get commonSense(): umi.CommonSense | null {\n        if (this.$route.query.status && typeof(this.$route.query.status) === 'string') {\n            const code = parseInt(this.$route.query.status);\n            return umi.status.get(code) || null;\n        }\n        if (this.$route.query.reason && typeof(this.$route.query.reason) === 'string') {\n            const code = parseInt(this.$route.query.reason);\n            return umi.reason.get(code) || null;\n        }\n        if (this.$route.query.scanner && typeof(this.$route.query.scanner) === 'string') {\n            const code = parseInt(this.$route.query.scanner);\n            return umi.scanner.get(code) || null;\n        }\n        return null;\n    }\n\n    mounted() {\n        import(\n            /* webpackChunkName: 'mapbox' */\n            'mapbox-gl'\n        ).then((mapboxgl) => {\n            this.ctrl = new mapboxgl.Map({\n                container: 'map-container',\n                accessToken: 'pk.eyJ1IjoibHVja2EtbWUiLCJhIjoiY2p2NDk5NmRvMHFreTQzbzduemM1MHV4cCJ9.7XGmxnEJRoCDr-i5BBmBfw',\n                style: 'mapbox://styles/mapbox/outdoors-v11',\n            });\n            this.ctrl.addControl(new mapboxgl.NavigationControl());\n            this.ctrl.addControl(new mapboxgl.FullscreenControl());\n            this.ctrl.once('idle', () => {\n                if (!this.ctrl) return;\n                this.ctrl.resize();\n                this.pourData();\n            });\n        });\n    }\n\n    private async pourData() {\n        if (!this.ctrl) return;\n        const nominations = await this.loadNominations();\n        // Generate GeoJSON and get bounds\n        const boundsNE = { lng: -181.0, lat: -91.0 };\n        const boundsSW = { lng:  181.0, lat:  91.0 };\n        const geoJSON: GeoJSON.FeatureCollection<GeoJSON.Geometry> = {\n            type: 'FeatureCollection',\n            features: nominations.map((nomination) => {\n                const lngLat = nomination.lngLat!;\n                if (lngLat.lng > boundsNE.lng) boundsNE.lng = lngLat.lng;\n                if (lngLat.lng < boundsSW.lng) boundsSW.lng = lngLat.lng;\n                if (lngLat.lat > boundsNE.lat) boundsNE.lat = lngLat.lat;\n                if (lngLat.lat < boundsSW.lat) boundsSW.lat = lngLat.lat;\n                return {\n                    type: 'Feature',\n                    properties: {\n                        title: nomination.title,\n                        color: nomination.statusData.color\n                    },\n                    geometry: {\n                        type: 'Point',\n                        coordinates: [lngLat.lng, lngLat.lat],\n                    }\n                }\n            }),\n        };\n        const id = 'nominations';\n        const color = getComputedStyle(document.documentElement).getPropertyValue('--mdc-theme-secondary');\n\n        // Add source and layers\n        this.ctrl.addSource(id, {\n            type: 'geojson',\n            data: geoJSON,\n            cluster: true,\n        });\n        this.ctrl.addLayer({\n            id: `${id}-cluster`,\n            type: 'circle',\n            source: id,\n            filter: [ 'has', 'point_count' ],\n            paint: {\n                'circle-color': color,\n                'circle-opacity': 0.6,\n                'circle-stroke-width': 4,\n                'circle-stroke-color': color,\n                'circle-radius': [\n                    'interpolate',\n                    [ 'linear' ],\n                    [ 'get', 'point_count' ],\n                    5, 10,\n                    50, 30,\n                    200, 50,\n                ]\n            }\n        });\n        this.ctrl.addLayer({\n            id: `${id}-count`,\n            type: 'symbol',\n            source: id,\n            filter: [ 'has', 'point_count' ],\n            layout: {\n                'text-field': [ 'get', 'point_count' ],\n                'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n                'text-size': 12,\n            },\n            paint: {\n                'text-color': '#000',\n            }\n        });\n        this.ctrl.addLayer({\n            id: `${id}-unclustered`,\n            type: 'circle',\n            source: id,\n            filter: [ '!', [ 'has', 'point_count' ] ],\n            paint: {\n                'circle-color': [ 'get', 'color' ],\n                'circle-opacity': 0.6,\n                'circle-radius': 5,\n                'circle-stroke-width': 2,\n                'circle-stroke-color': [ 'get', 'color' ],\n            }\n        });\n        this.ctrl.addLayer({\n            id: `${id}-title`,\n            type: 'symbol',\n            source: id,\n            filter: [ 'has', 'title' ],\n            layout: {\n                'text-field': [ 'get', 'title' ],\n                'text-font': [ 'DIN Offc Pro Medium', 'Arial Unicode MS Bold' ],\n                'text-size': 12,\n                'text-anchor': 'top',\n                'text-offset': [ 0, 0.6 ]\n            },\n            paint: {\n                'text-color': '#FFF',\n                'text-halo-color': '#000',\n                'text-halo-width': 1\n            }\n        });\n\n        // Set listener\n        this.ctrl.on('click', `${id}-cluster`, event => {\n            if (!this.ctrl || !event.features) return;\n            const feature = event.features[0];\n            const clusterId = feature.properties!.cluster_id;\n            (this.ctrl.getSource(id) as mapboxgl.GeoJSONSource).getClusterExpansionZoom(\n                clusterId,\n                (err, zoom) => {\n                    if (!this.ctrl || err) return;\n                    this.ctrl.easeTo({\n                        center: (feature.geometry as GeoJSON.Point).coordinates as [number, number],\n                        zoom: zoom\n                    });\n                }\n            );\n        });\n\n        // Fit the bounds\n        if (boundsSW.lng > -181) {\n            this.ctrl.fitBounds([boundsSW, boundsNE], { linear: true, padding: 16 });\n        }\n    }\n\n    private async loadNominations() {\n        const commonSense = this.commonSense;\n        const raws = await dia.getAll(commonSense?.predicator);\n        return raws.filter(raw => raw.lngLat).map(raw => Nomination.from(raw));\n    }\n}\n</script>\n\n<style lang=\"scss\">\nmain.nomination-map {\n    margin: 0;\n    flex: 1;\n\n    #map-container {\n        width: 100%;\n        height: 100%;\n\n        // Adjust for safe area\n        .mapboxgl-control-container {\n            > .mapboxgl-ctrl-top-left, > .mapboxgl-ctrl-bottom-left {\n                margin-left: env(safe-area-inset-left);\n            }\n            > .mapboxgl-ctrl-top-right, > .mapboxgl-ctrl-bottom-right {\n                margin-right: env(safe-area-inset-right);\n            }\n\n            > .mapboxgl-ctrl-bottom-left, > .mapboxgl-ctrl-bottom-right {\n                margin-bottom: env(safe-area-inset-bottom);\n            }\n        }\n    }\n}\n</style>","\nimport { Vue, Options, Watch } from 'vue-property-decorator';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nimport { dia } from '@/service/dia';\nimport { umi } from '@/service/umi';\nimport Nomination from '@/service/nomination';\n\nimport MaterialTopAppBar from '@/components/material/TopAppBar.vue';\nimport MaterialTopAppBarAdjust from '@/components/material/TopAppBarAdjust.vue';\n\nimport locales from './NominationMap.locales.json';\n\n@Options({\n    components: {\n        MaterialTopAppBar, MaterialTopAppBarAdjust,\n    },\n    i18n: {\n        messages: locales\n    }\n})\nexport default class NominationMap extends Vue {\n\n    private ctrl?: mapboxgl.Map;\n\n    get title(): string {\n        return this.commonSense?.title ?? this.$t('all');\n    }\n\n    private get commonSense(): umi.CommonSense | null {\n        if (this.$route.query.status && typeof(this.$route.query.status) === 'string') {\n            const code = parseInt(this.$route.query.status);\n            return umi.status.get(code) || null;\n        }\n        if (this.$route.query.reason && typeof(this.$route.query.reason) === 'string') {\n            const code = parseInt(this.$route.query.reason);\n            return umi.reason.get(code) || null;\n        }\n        if (this.$route.query.scanner && typeof(this.$route.query.scanner) === 'string') {\n            const code = parseInt(this.$route.query.scanner);\n            return umi.scanner.get(code) || null;\n        }\n        return null;\n    }\n\n    mounted() {\n        import(\n            /* webpackChunkName: 'mapbox' */\n            'mapbox-gl'\n        ).then((mapboxgl) => {\n            this.ctrl = new mapboxgl.Map({\n                container: 'map-container',\n                accessToken: 'pk.eyJ1IjoibHVja2EtbWUiLCJhIjoiY2p2NDk5NmRvMHFreTQzbzduemM1MHV4cCJ9.7XGmxnEJRoCDr-i5BBmBfw',\n                style: 'mapbox://styles/mapbox/outdoors-v11',\n            });\n            this.ctrl.addControl(new mapboxgl.NavigationControl());\n            this.ctrl.addControl(new mapboxgl.FullscreenControl());\n            this.ctrl.once('idle', () => {\n                if (!this.ctrl) return;\n                this.ctrl.resize();\n                this.pourData();\n            });\n        });\n    }\n\n    private async pourData() {\n        if (!this.ctrl) return;\n        const nominations = await this.loadNominations();\n        // Generate GeoJSON and get bounds\n        const boundsNE = { lng: -181.0, lat: -91.0 };\n        const boundsSW = { lng:  181.0, lat:  91.0 };\n        const geoJSON: GeoJSON.FeatureCollection<GeoJSON.Geometry> = {\n            type: 'FeatureCollection',\n            features: nominations.map((nomination) => {\n                const lngLat = nomination.lngLat!;\n                if (lngLat.lng > boundsNE.lng) boundsNE.lng = lngLat.lng;\n                if (lngLat.lng < boundsSW.lng) boundsSW.lng = lngLat.lng;\n                if (lngLat.lat > boundsNE.lat) boundsNE.lat = lngLat.lat;\n                if (lngLat.lat < boundsSW.lat) boundsSW.lat = lngLat.lat;\n                return {\n                    type: 'Feature',\n                    properties: {\n                        title: nomination.title,\n                        color: nomination.statusData.color\n                    },\n                    geometry: {\n                        type: 'Point',\n                        coordinates: [lngLat.lng, lngLat.lat],\n                    }\n                }\n            }),\n        };\n        const id = 'nominations';\n        const color = getComputedStyle(document.documentElement).getPropertyValue('--mdc-theme-secondary');\n\n        // Add source and layers\n        this.ctrl.addSource(id, {\n            type: 'geojson',\n            data: geoJSON,\n            cluster: true,\n        });\n        this.ctrl.addLayer({\n            id: `${id}-cluster`,\n            type: 'circle',\n            source: id,\n            filter: [ 'has', 'point_count' ],\n            paint: {\n                'circle-color': color,\n                'circle-opacity': 0.6,\n                'circle-stroke-width': 4,\n                'circle-stroke-color': color,\n                'circle-radius': [\n                    'interpolate',\n                    [ 'linear' ],\n                    [ 'get', 'point_count' ],\n                    5, 10,\n                    50, 30,\n                    200, 50,\n                ]\n            }\n        });\n        this.ctrl.addLayer({\n            id: `${id}-count`,\n            type: 'symbol',\n            source: id,\n            filter: [ 'has', 'point_count' ],\n            layout: {\n                'text-field': [ 'get', 'point_count' ],\n                'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n                'text-size': 12,\n            },\n            paint: {\n                'text-color': '#000',\n            }\n        });\n        this.ctrl.addLayer({\n            id: `${id}-unclustered`,\n            type: 'circle',\n            source: id,\n            filter: [ '!', [ 'has', 'point_count' ] ],\n            paint: {\n                'circle-color': [ 'get', 'color' ],\n                'circle-opacity': 0.6,\n                'circle-radius': 5,\n                'circle-stroke-width': 2,\n                'circle-stroke-color': [ 'get', 'color' ],\n            }\n        });\n        this.ctrl.addLayer({\n            id: `${id}-title`,\n            type: 'symbol',\n            source: id,\n            filter: [ 'has', 'title' ],\n            layout: {\n                'text-field': [ 'get', 'title' ],\n                'text-font': [ 'DIN Offc Pro Medium', 'Arial Unicode MS Bold' ],\n                'text-size': 12,\n                'text-anchor': 'top',\n                'text-offset': [ 0, 0.6 ]\n            },\n            paint: {\n                'text-color': '#FFF',\n                'text-halo-color': '#000',\n                'text-halo-width': 1\n            }\n        });\n\n        // Set listener\n        this.ctrl.on('click', `${id}-cluster`, event => {\n            if (!this.ctrl || !event.features) return;\n            const feature = event.features[0];\n            const clusterId = feature.properties!.cluster_id;\n            (this.ctrl.getSource(id) as mapboxgl.GeoJSONSource).getClusterExpansionZoom(\n                clusterId,\n                (err, zoom) => {\n                    if (!this.ctrl || err) return;\n                    this.ctrl.easeTo({\n                        center: (feature.geometry as GeoJSON.Point).coordinates as [number, number],\n                        zoom: zoom\n                    });\n                }\n            );\n        });\n\n        // Fit the bounds\n        if (boundsSW.lng > -181) {\n            this.ctrl.fitBounds([boundsSW, boundsNE], { linear: true, padding: 16 });\n        }\n    }\n\n    private async loadNominations() {\n        const commonSense = this.commonSense;\n        const raws = await dia.getAll(commonSense?.predicator);\n        return raws.filter(raw => raw.lngLat).map(raw => Nomination.from(raw));\n    }\n}\n","import { render } from \"./NominationMap.vue?vue&type=template&id=0281dbb5\"\nimport script from \"./NominationMap.vue?vue&type=script&lang=ts\"\nexport * from \"./NominationMap.vue?vue&type=script&lang=ts\"\n\nimport \"./NominationMap.vue?vue&type=style&index=0&id=0281dbb5&lang=scss\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}